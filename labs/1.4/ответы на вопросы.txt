 Рассказать об аномалиях доступа к БД.
Аномалии доступа к БД - это ситуации, когда несколько пользователей
или процессов обращаются к БД и происходят конфликты,
которые могут привести к непредсказуемым результатам.

 Перечислить аномалии, возникающие на каждом из уровней изолированности.
На уровне изоляции Read Uncommitted возникают аномалии Dirty Read,
на уровне Read Committed - Non-Repeatable Read,
на уровне Repeatable Read - Phantom Read. На уровне Serializable аномалий не возникает.

 Рассказать о свойствах транзакций.
Свойства транзакций - ACID (атомарность, согласованность, изолированность, долговечность).

 Рассказать об управлении транзакциями.
Управление транзакциями включает команды BEGIN, COMMIT, ROLLBACK и SAVEPOINT,
 а также возможность задавать уровень изоляции и управлять блокировками.

 Что такое тупики? Как бороться с тупиками?
Тупики (deadlocks) - это ситуация, когда два или более
процесса ожидают друг друга, чтобы освободить заблокированные ресурсы.
Бороться с тупиками можно с помощью установки корректного
порядка блокировки ресурсов или использованием механизмов,
таких как тайм-ауты или перезапуск транзакций.

 На каком уровне изолированности возможны тупики?
Тупики возможны на уровне изолированности транзакций "Serializable" или "Repeatable Read".

 Как обеспечивается изолированность транзакций в СУБД?
Изолированность транзакций в СУБД обеспечивается с помощью механизмов
 блокировки ресурсов, которые гарантируют,
 что две транзакции не могут изменять один и тот же ресурс одновременно.
  Каждая транзакция получает блокировки на ресурсы, которые она изменяет,
  и удерживает их до тех пор, пока транзакция не завершится.
  Это гарантирует, что изменения, внесенные одной транзакцией,
   не будут видны другим транзакциям до ее завершения.
   + MVCC

 Как бороться с проблемой фантомов?
Проблема фантомов возникает, когда несколько транзакций могут видеть
одну и ту же строку, но при этом изменять ее по-разному. Для борьбы
с этой проблемой в PostgreSQL используют уровень изоляции Repeatable read,
который гарантирует, что все транзакции будут выполнены так, как если
бы они выполнялись последовательно.

 Что такое журнал транзакций?
Журнал транзакций (также называемый WAL) - это механизм,
который записывает все изменения данных,
 сделанные в базе данных PostgreSQL. Это позволяет восстанавливать
 базу данных в случае сбоя, когда некоторые изменения могли не сохраниться.

 Как обеспечивается постоянство хранения (durability) в СУБД?
wal

 Объяснить принцип работы написанного триггера.

 Какие бывают типы триггеров?
insert/update/delete

 Когда может срабатывать триггер?
before/after/instead of insert/update/delete
Триггер может срабатывать при выполнении определенного действия
в базе данных, например, при вставке, обновлении или удалении
строк в таблице. Также триггер может срабатывать при определенном событии,
например, при изменении прав доступа к таблице или при создании индекса.

 В каком порядке срабатывают триггеры?
Триггеры в Postgres SQL срабатывают в порядке, определенном при их создании.

 Можно ли менять порядок срабатывания триггеров?
Да, можно изменить порядок срабатывания триггеров
путем удаления их и создания заново в нужном порядке.

 Сработает ли триггер, если оператор, выполненный пользователем, не
затрагивает ни одну строку таблицы?
нет

 Продемонстрировать откат транзакции при возникновении ошибок.
begin
savepoint my_savepoint;
...
rollback to my_savepoint;
commit;

 Продемонстрировать возникновение тупика.
 Исправить неверные сценарии проверки аномалий
 Исправить ошибки в работе триггера.
 Модифицировать триггер каким-либо образом.